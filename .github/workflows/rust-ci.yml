name: Rust CI - Build, Test, and Lint

on:
  push:
    branches: [ main, develop, "copilot/*" ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Divine Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check Rust Code
        run: cargo check --all-targets --all-features

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Divine Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Tests
        run: cargo test --all-features --no-fail-fast

      - name: Run Doc Tests
        run: cargo test --doc

  lint:
    name: Rust Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Divine Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check Formatting
        run: cargo fmt --all -- --check

  holyc-compilation:
    name: HolyC Compilation Tests
    runs-on: ubuntu-latest
    needs: [check]
    steps:
      - name: Checkout Divine Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-holyc-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Pible Compiler
        run: cargo build --release

      - name: Test Hello World Example
        run: |
          echo "=== Testing Hello World HolyC Compilation ==="
          ./target/release/pible examples/hello-world/src/main.hc
          if [ -f "examples/hello-world/src/main.bpf" ]; then
            echo "✓ BPF file generated successfully"
            ls -la examples/hello-world/src/main.bpf
            file examples/hello-world/src/main.bpf
            echo "BPF bytecode preview:"
            hexdump -C examples/hello-world/src/main.bpf | head -3
          else
            echo "✗ BPF file generation failed"
            exit 1
          fi

      - name: Test Escrow Example
        run: |
          echo "=== Testing Escrow HolyC Compilation ==="
          ./target/release/pible examples/escrow/src/main.hc
          if [ -f "examples/escrow/src/main.bpf" ]; then
            echo "✓ Escrow BPF file generated successfully"
            ls -la examples/escrow/src/main.bpf
          else
            echo "✗ Escrow BPF file generation failed"
            exit 1
          fi

      - name: Test Solana Target with IDL Generation
        run: |
          echo "=== Testing Solana BPF Target ==="
          ./target/release/pible --target solana-bpf --generate-idl examples/hello-world/src/main.hc
          if [ -f "examples/hello-world/src/main.bpf" ]; then
            echo "✓ Solana BPF file generated"
            ls -la examples/hello-world/src/main.bpf
          fi
          if [ -f "examples/hello-world/src/main.json" ]; then
            echo "✓ IDL file generated"
            echo "IDL preview:"
            head -10 examples/hello-world/src/main.json
          fi

      - name: Test BPF VM Target
        run: |
          echo "=== Testing BPF VM Target ==="
          ./target/release/pible --target bpf-vm --enable-vm-testing examples/hello-world/src/main.hc
          echo "✓ BPF VM compilation completed"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Divine Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run Security Audit
        run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Divine Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate Code Coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: lcov.info
          fail_ci_if_error: false

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [check, test, lint]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Divine Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build Release Binary
        run: cargo build --release

      - name: Strip Binary
        run: strip target/release/pible

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pible-linux-x86_64
          path: target/release/pible
          retention-days: 30

      - name: Generate Release Archive
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -p release
          cp target/release/pible release/
          cp README.md release/
          cp LICENSE release/
          tar -czf pible-linux-x86_64.tar.gz -C release .

      - name: Upload Release Archive
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: pible-release-linux-x86_64
          path: pible-linux-x86_64.tar.gz